//
// Sass function to use rem units with optional pixel fallback
//
// author: Pierre Burel
// link: https://github.com/pierreburel/sass-rem/blob/master/_rem.scss

@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

$rem-baseline: 16px !default;

@function rem-convert($to, $values...) {
  $result: ();
  $separator: list.separator($values);

  @each $value in $values {
    @if meta.type-of($value) == "number" and math.unit($value) == "rem" and $to == "px" {
      $result: list.append($result, math.div($value, 1rem) * $rem-baseline, $separator);
    } @else if meta.type-of($value) == "number" and math.unit($value) == "px" and $to == "rem" {
      $result: list.append($result, math.div($value, $rem-baseline) * 1rem, $separator);
    } @else if meta.type-of($value) == "list" {
      $result: list.append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: list.append($result, $value, $separator);
    }
  }

  @return if(list.length($result) == 1, list.nth($result, 1), $result);
}

@function rem-map-convert($to, $map) {
  $result: $map;

  @each $key, $value in $map {
    $result: map-merge($result, ($key: rem-convert($to, $value...)));
  }

  @return $result;
}

@function rem($values...) {
  @return convert($values...);
}

@function rem-map($map) {
  @return rem-map-convert("rem", $map);
}

@function rem($values...) {
  @return rem-convert("rem", $values...);
}

@function rem-map($map) {
  @return rem-map-convert("rem", $map);
}

@function em($values...) {
  @return rem-convert("em", $values...);
}

@function em-map($map) {
  @return rem-map-convert("em", $map);
}

@function px($values...) {
  @return rem-convert("px", $values...);
}

@function px-map($map) {
  @return rem-map-convert("px", $map);
}
